service: zip-service


plugins:
  - serverless-stage-manager
  - serverless-domain-manager
  - serverless-wsgi
frameworkVersion: '3'


custom:
  wsgi:
    app: app.app.app
    packRequirements: false
    pipArgs: --no-deps
  domains:
    production: 'api.rubikhomes.com'
    dev: 'devapi.rubikhomes.com'
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: "zip_service"
    createRoute53Record: true
  stages:
    - production
    - dev
  ENVIRONMENT:
    production: "production"
    dev: "dev"
  AWS_POOL_ID:
    production: ${ssm:/pool_id_aws}
    dev: ${ssm:/pool_id_aws}
  AWS_REGION:
    production: "us-east-1"
    dev: "us-east-1"
  AWS_IDENTITY_POOL_ID:
    production: ${ssm:/identity_pool_id_aws}
    dev: ${ssm:/identity_pool_id_aws}
  AWS_ACCOUNT_ID:
    production: ${ssm:/account_id_aws}
    dev: ${ssm:/account_id_aws_dev}
  AWS_COGNITO_CLIENT_ID:
    production: ${ssm:/cognito_client_id_aws}
    dev: ${ssm:/cognito_client_id_aws}
  DEBUG:
    production: True
    dev: False


provider:
  name: aws
  stage: ${opt:stage,'dev'}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'cognito-identity:*'
            - 'cognito-sync:*'
            - 'cognito-idp:*'
          Resource: "arn:aws:cognito-idp:us-east-1:403105185705:userpool/us-east-1_1a8sW4STS"
  runtime: python3.8
  region: us-east-1
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
  ecr:
    images:
      appimage:
        path: ./
  environment:
    API_GATEWAY_BASE_PATH: ${self:custom.customDomain.basePath}
    DEBUG: ${self:custom.DEBUG.${self:provider.stage}}
    AWS_POOL_ID: ${self:custom.AWS_POOL_ID.${self:provider.stage}}
    REGION: "us-east-1"
    AWS_IDENTITY_POOL_ID: ${self:custom.AWS_IDENTITY_POOL_ID.${self:provider.stage}}
    AWS_ACCOUNT_ID: ${self:custom.AWS_ACCOUNT_ID.${self:provider.stage}}
    AWS_COGNITO_CLIENT_ID: ${self:custom.AWS_COGNITO_CLIENT_ID.${self:provider.stage}}
    ENVIRONMENT: ${self:custom.ENVIRONMENT.${self:provider.stage}}

package:
  patterns:
    - '!src/**'
    - '!.serverless'
    - '!static/**'
    - '!node_modules/**'
    - '!venv/**'
    - '!.pytest_cache'
    - '!.serverless-offline'
    - '!.env'
    - '!requirements.txt'
    - '!tests/**'
    - '!README.md'
    - '!package.json'
    - '!package-lock.json'
    
functions:
  api:
    image:
      name: appimage
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY
    memorySize: 10240
    timeout: 30